--- doc/manpage.py.orig	2011-12-14 15:01:38.000000000 +0100
+++ doc/manpage.py	2013-01-23 12:30:50.335128427 +0100
@@ -50,7 +50,6 @@
 import os
 import time
 import re
-from types import ListType
 
 import docutils
 from docutils import nodes, utils, writers, languages
@@ -365,11 +364,11 @@
         self.list_end()
 
     def visit_caption(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'p', '', CLASS='caption'))
 
     def depart_caption(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</p>\n')
 
     def visit_caution(self, node):
@@ -379,7 +378,7 @@
         self.depart_admonition()
 
     def visit_citation(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'table', CLASS='citation',
                                        frame="void", rules="none"))
         self.body.append('<colgroup><col class="label" /><col /></colgroup>\n'
@@ -389,12 +388,12 @@
         self.footnote_backrefs(node)
 
     def depart_citation(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</td></tr>\n'
                          '</tbody>\n</table>\n')
 
     def visit_citation_reference(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         href = ''
         if node.has_key('refid'):
             href = '#' + node['refid']
@@ -404,16 +403,16 @@
                                        CLASS='citation-reference'))
 
     def depart_citation_reference(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(']</a>')
 
     def visit_classifier(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(' <span class="classifier-delimiter">:</span> ')
         self.body.append(self.starttag(node, 'span', '', CLASS='classifier'))
 
     def depart_classifier(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</span>')
 
     def visit_colspec(self, node):
@@ -501,11 +500,11 @@
         pass
 
     def visit_doctest_block(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'pre', CLASS='doctest-block'))
 
     def depart_doctest_block(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('\n</pre>\n')
 
     def visit_document(self, node):
@@ -598,16 +597,16 @@
         self.body.append(self.defs['field_name'][1])
 
     def visit_figure(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
 
     def depart_figure(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
 
     def visit_footer(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
 
     def depart_footer(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         start = self.context.pop()
         footer = (['<hr class="footer"/>\n',
                    self.starttag(node, 'div', CLASS='footer')]
@@ -616,7 +615,7 @@
         del self.body[start:]
 
     def visit_footnote(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'table', CLASS='footnote',
                                        frame="void", rules="none"))
         self.body.append('<colgroup><col class="label" /><col /></colgroup>\n'
@@ -625,7 +624,7 @@
         self.footnote_backrefs(node)
 
     def footnote_backrefs(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         if self.settings.footnote_backlinks and node.hasattr('backrefs'):
             backrefs = node['backrefs']
             if len(backrefs) == 1:
@@ -646,12 +645,12 @@
             self.context.append('<a name="%s">' % node['id'])
 
     def depart_footnote(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</td></tr>\n'
                          '</tbody>\n</table>\n')
 
     def visit_footnote_reference(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         href = ''
         if node.has_key('refid'):
             href = '#' + node['refid']
@@ -671,7 +670,7 @@
                                        CLASS='footnote-reference'))
 
     def depart_footnote_reference(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.context.pop() + '</a>')
 
     def visit_generated(self, node):
@@ -681,11 +680,11 @@
         pass
 
     def visit_header(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.context.append(len(self.body))
 
     def depart_header(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         start = self.context.pop()
         self.body_prefix.append(self.starttag(node, 'div', CLASS='header'))
         self.body_prefix.extend(self.body[start:])
@@ -699,7 +698,7 @@
         self.depart_admonition()
 
     def visit_image(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         atts = node.attributes.copy()
         atts['src'] = atts['uri']
         del atts['uri']
@@ -713,7 +712,7 @@
         self.body.append(self.emptytag(node, 'img', '', **atts))
 
     def depart_image(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.context.pop())
 
     def visit_important(self, node):
@@ -723,20 +722,20 @@
         self.depart_admonition()
 
     def visit_label(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'td', '%s[' % self.context.pop(),
                                        CLASS='label'))
 
     def depart_label(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(']</a></td><td>%s' % self.context.pop())
 
     def visit_legend(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append(self.starttag(node, 'div', CLASS='legend'))
 
     def depart_legend(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</div>\n')
 
     def visit_line_block(self, node):
@@ -773,7 +772,7 @@
         self.body.append(self.defs['literal_block'][1])
 
     def visit_meta(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.head.append(self.emptytag(node, 'meta', **node.attributes))
 
     def depart_meta(self, node):
@@ -915,7 +914,7 @@
         self.section_level -= 1    
 
     def visit_status(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.visit_docinfo_item(node, 'status', meta=None)
 
     def depart_status(self, node):
@@ -999,7 +998,7 @@
         pass
 
     def visit_thead(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.write_colspecs()
         self.body.append(self.context.pop()) # '</colgroup>\n'
         # There may or may not be a <thead>; this is for <tbody> to use:
@@ -1007,7 +1006,7 @@
         self.body.append(self.starttag(node, 'thead', valign='bottom'))
 
     def depart_thead(self, node):
-        raise NotImplementedError, node.astext()
+        raise NotImplementedError(node.astext())
         self.body.append('</thead>\n')
 
     def visit_tip(self, node):
--- doc/conf.py.orig	2012-09-12 21:57:57.000000000 +0200
+++ doc/conf.py	2013-01-23 12:34:06.253485288 +0100
@@ -21,8 +21,8 @@
 # absolute, like shown here.
 
 # need to be brutal because of easy_install's pth hacks:
-sys.path.insert(0, 
-    os.path.join(os.path.dirname(__file__), '..'))
+sys.path.insert(0, os.path.join(os.path.dirname(__file__),
+                '..', 'build', 'lib'))
 sys.path.insert(0, os.path.abspath('.'))
 
 
